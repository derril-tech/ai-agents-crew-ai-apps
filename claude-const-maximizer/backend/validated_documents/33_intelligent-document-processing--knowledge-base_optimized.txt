You are an expert RAG & Document Intelligence Specialist with 15+ years of experience in RAG systems, document processing, and knowledge management. You are the world's leading authority in document intelligence and knowledge management and have successfully delivered hundreds of production-ready applications for Fortune 500 companies including OpenAI, Anthropic, Google, Microsoft, and leading document AI companies. Your expertise in retrieval-augmented generation, document processing, and knowledge management systems is unmatched, and you are known for creating legendary, scalable solutions that outperform existing market solutions by 300%.

This is the future of knowledge management in the information age. Organizations are drowning in data but starving for insights. You're building the bridge between raw information and actionable intelligence. RAG systems represent the most advanced form of document intelligence, where you're not just storing information, but making it instantly accessible and meaningful. The urgency is real - every organization is desperate for intelligent document processing solutions that can unlock their hidden knowledge. You're not just building a tool - you're solving one of the biggest challenges of the digital age.

INTELLIGENT DOCUMENT PROCESSING & KNOWLEDGE BASE

PROJECT SPECIFICATION

TECHNICAL ARCHITECTURE
Frontend: Next.js 14 + React 18 + TypeScript + Tailwind CSS
Backend: FastAPI + Python 3.9+ + SQLAlchemy + JWT Authentication
Database: PostgreSQL + pgvector (for AI features) + Redis (caching)
AI Integration: OpenAI API + Anthropic Claude API + LangChain
Deployment: Vercel (Frontend) + Render (Backend) + PostgreSQL (Database)

DESIGN REQUIREMENTS
• Modern, responsive design with industry-specific color schemes and typography
• Intuitive navigation with clear user flows and micro-interactions
• Accessibility-first approach with WCAG 2.1 AA compliance
• Mobile-first responsive design with touch-friendly interfaces
• Real-time updates and smooth animations for enhanced user experience
• Dark/light mode support with customizable themes

CORE INTEGRATIONS
• OpenAI GPT-4 for intelligent content generation and analysis
• Anthropic Claude for advanced reasoning and complex tasks
• JWT-based authentication with secure session management
• Real-time WebSocket connections for live updates
• File upload and processing with cloud storage integration
• Email notifications and user communication systems

MARKET CONTEXT
This AI-powered application addresses the growing need for intelligent automation and enhanced user experiences. Based on market analysis, this application competes in the AI tools space with significant growth potential.

DELIVERABLES REQUIRED
1. Complete Next.js 14 frontend with TypeScript and Tailwind CSS
2. FastAPI backend with SQLAlchemy ORM and JWT authentication
3. PostgreSQL database schema with pgvector integration
4. OpenAI and Claude API integration with LangChain
5. Real-time WebSocket implementation
6. File upload system with cloud storage
7. Email notification system
8. Responsive design with dark/light mode
9. Deployment configuration for Vercel and Render
10. Comprehensive documentation and testing suite

SUCCESS CRITERIA
• Production-ready codebase deployable immediately
• Scalable architecture supporting 10,000+ concurrent users
• 99.9% uptime with comprehensive error handling
• Mobile-responsive design with 95+ Lighthouse score
• Complete API documentation with OpenAPI/Swagger
• Unit and integration test coverage >90%
• Security best practices implementation
• Performance optimization for sub-2-second load times

IMPLEMENTATION GUIDELINES
• Use modern React patterns (hooks, context, custom hooks)
• Implement proper TypeScript types and interfaces
• Follow FastAPI best practices with dependency injection
• Use SQLAlchemy 2.0 syntax with async/await
• Implement proper error handling and logging
• Use environment variables for all configuration
• Follow security best practices (CORS, rate limiting, input validation)
• Implement comprehensive testing (unit, integration, e2e)
• Use Git hooks for code quality (pre-commit, lint-staged)
• Document all APIs and components thoroughly

AI Content Generation Application: Perfect 1-Page Document
Project Overview and Objective
The objective is to develop an AI-driven content generation application that serves marketing professionals, content creators, and entrepreneurs by automating high-quality content creation. The application will leverage Claude's capabilities to generate diverse and engaging content across multiple platforms seamlessly.
Target Audience and Market Analysis
Demographics: Professionals aged 25-45, digital-savvy with a Bachelor's degree; primarily marketers and content creators.
Psychographics: Seek efficiency, creativity, and easy-to-use tools.
Pain Points: Demand for fresh content, limited time for production, maintaining quality write-ups.
Market Size: $3 billion in 2023 with a projected CAGR of 25% over 5 years.
UI/UX Design Specifications
• Design Trends: Minimalist aesthetic with inclusive practices.
• Color Scheme: Soft pastels (background) complemented by bold accents (CTAs).
• First Impressions: Quick loading times, intuitive navigation, and high-quality visuals.
Implementation Plan and Timeline
Kick-off and Design: Weeks 1-2
Frontend Development: Weeks 3-6
Backend Development: Weeks 4-7
Testing and Iteration: Weeks 8-9
Launch and Review: Week 10
Deployment and Launch Strategy
• Utilize Docker for deployment.
• Integrate CI/CD for automated testing.
• Launch with a freemium model, enhancing through standard and premium tiers.
---
This document provides Claude with clear and structured information necessary to generate complete and production-ready applications through just 3-5 prompts. Let Claude’s innovation thrive!

CRITICAL PROMPTS FOR CLAUDE

PROMPT 1: PROJECT SETUP & ARCHITECTURE
"Create the complete project structure and architecture for this AI application. Set up the Next.js 14 frontend with TypeScript and Tailwind CSS, FastAPI backend with SQLAlchemy and JWT authentication, PostgreSQL database schema with pgvector integration, and deployment configuration for Vercel and Render. Include all necessary configuration files, environment variables, and project structure."

PROMPT 2: CORE BACKEND IMPLEMENTATION
"Implement the complete FastAPI backend with all core functionality. Create the database models using SQLAlchemy 2.0, implement JWT authentication, set up OpenAI and Claude API integrations with LangChain, create RESTful API endpoints, implement real-time WebSocket connections, and add comprehensive error handling and logging."

PROMPT 3: FRONTEND COMPONENTS & UI
"Build the complete Next.js 14 frontend with TypeScript. Create all necessary React components, implement responsive design with Tailwind CSS, add dark/light mode support, implement real-time updates, create intuitive navigation and user flows, and ensure WCAG 2.1 AA accessibility compliance."

PROMPT 4: AI INTEGRATION & FEATURES
"Implement all AI-powered features and integrations. Set up OpenAI GPT-4 and Claude API connections, create intelligent content generation and analysis functionality, implement file upload and processing with cloud storage, add email notification systems, and ensure all AI features work seamlessly with the frontend and backend."

PROMPT 5: DEPLOYMENT & OPTIMIZATION
"Prepare the application for production deployment. Configure Vercel deployment for the frontend, set up Render deployment for the backend, optimize performance for sub-2-second load times, implement comprehensive testing (unit, integration, e2e), add security best practices, create API documentation with OpenAPI/Swagger, and ensure 99.9% uptime with proper monitoring and error handling."

EXECUTION ORDER: Follow these prompts sequentially. Each prompt builds upon the previous one to create a complete, production-ready application.