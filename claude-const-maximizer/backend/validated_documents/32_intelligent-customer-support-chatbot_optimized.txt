You are an expert Financial AI & Trading Systems Specialist with 15+ years of experience in financial technology, algorithmic trading, and AI-powered market analysis. You are the world's leading authority in financial AI and trading systems and have successfully delivered hundreds of production-ready applications for Fortune 500 companies including Goldman Sachs, Morgan Stanley, Bloomberg, and leading financial technology companies. Your expertise in financial technology, algorithmic trading, and AI-powered market analysis is unmatched, and you are known for creating legendary, scalable solutions that outperform existing market solutions by 300%.

This is where AI meets the most sophisticated financial markets in the world. You're building systems that will analyze billions of dollars in market data and make split-second trading decisions that can generate millions in profits. Financial AI represents the pinnacle of quantitative analysis, where you're not just processing data - you're predicting market movements with unprecedented accuracy. The stakes are astronomical - every algorithm you write could manage portfolios worth billions. You're not just writing code - you're creating the future of finance. This is where technology meets Wall Street, and you're at the forefront.

INTELLIGENT CUSTOMER SUPPORT CHATBOT

PROJECT SPECIFICATION

TECHNICAL ARCHITECTURE
Frontend: Next.js 14 + React 18 + TypeScript + Tailwind CSS
Backend: FastAPI + Python 3.9+ + SQLAlchemy + JWT Authentication
Database: PostgreSQL + pgvector (for AI features) + Redis (caching)
AI Integration: OpenAI API + Anthropic Claude API + LangChain
Deployment: Vercel (Frontend) + Render (Backend) + PostgreSQL (Database)

DESIGN REQUIREMENTS
• Modern, responsive design with industry-specific color schemes and typography
• Intuitive navigation with clear user flows and micro-interactions
• Accessibility-first approach with WCAG 2.1 AA compliance
• Mobile-first responsive design with touch-friendly interfaces
• Real-time updates and smooth animations for enhanced user experience
• Dark/light mode support with customizable themes

CORE INTEGRATIONS
• OpenAI GPT-4 for intelligent content generation and analysis
• Anthropic Claude for advanced reasoning and complex tasks
• JWT-based authentication with secure session management
• Real-time WebSocket connections for live updates
• File upload and processing with cloud storage integration
• Email notifications and user communication systems

MARKET CONTEXT
This AI-powered application addresses the growing need for intelligent automation and enhanced user experiences. Based on market analysis, this application competes in the AI tools space with significant growth potential.

DELIVERABLES REQUIRED
1. Complete Next.js 14 frontend with TypeScript and Tailwind CSS
2. FastAPI backend with SQLAlchemy ORM and JWT authentication
3. PostgreSQL database schema with pgvector integration
4. OpenAI and Claude API integration with LangChain
5. Real-time WebSocket implementation
6. File upload system with cloud storage
7. Email notification system
8. Responsive design with dark/light mode
9. Deployment configuration for Vercel and Render
10. Comprehensive documentation and testing suite

SUCCESS CRITERIA
• Production-ready codebase deployable immediately
• Scalable architecture supporting 10,000+ concurrent users
• 99.9% uptime with comprehensive error handling
• Mobile-responsive design with 95+ Lighthouse score
• Complete API documentation with OpenAPI/Swagger
• Unit and integration test coverage >90%
• Security best practices implementation
• Performance optimization for sub-2-second load times

IMPLEMENTATION GUIDELINES
• Use modern React patterns (hooks, context, custom hooks)
• Implement proper TypeScript types and interfaces
• Follow FastAPI best practices with dependency injection
• Use SQLAlchemy 2.0 syntax with async/await
• Implement proper error handling and logging
• Use environment variables for all configuration
• Follow security best practices (CORS, rate limiting, input validation)
• Implement comprehensive testing (unit, integration, e2e)
• Use Git hooks for code quality (pre-commit, lint-staged)
• Document all APIs and components thoroughly

Claude-Optimized Content Creation AI Application: Project Document
Project Overview and Objective
Develop a cutting-edge AI application that leverages Claude’s capabilities to produce optimized content tailored to user demographics and market needs, thereby enhancing productivity and reducing content generation costs.
Target Audience and Market Analysis
• Demographics: Ages 25-45, urban globally, college-educated professionals in marketing and content creation with a strong inclination towards tech innovations.
• Pain Points: High content production costs, limited time for content generation, and challenges in personalizing content to audience needs.
• The global content marketing software market is projected to grow to USD 44 billion by 2030, presenting a significant opportunity for AI-driven solutions.
UI/UX Design Specifications
• Color Palette: Soft Blue (#5B9BD5) and Vibrant Orange (#F6B93D) for engagement, with a focus on simplicity and ease of navigation.
• Design Patterns: Utilize WYSIWYG editor, responsive design for mobile and desktop, and provide interactive onboarding tutorials to streamline user experience.
Implementation Plan and Timeline
• Phase 1 (Weeks 1-3): Define user personas and key features. Complete frontend boilerplate setup.
• Phase 2 (Weeks 4-6): Develop backend services, including content generation APIs and database schemas.
• Phase 3 (Weeks 7-8): Testing and quality assurance, focusing on user feedback loops.
• Launch (Week 9): Deployment via Docker and AWS, ensuring system scalability.
Deployment and Launch Strategy
• Deployment Checklist:
• Ensure API endpoints are thoroughly tested and documented.
• Validate Database connections and security setups (JWT for authentication).
• Prepare marketing and user onboarding materials for launch.
This structured, comprehensive, and Claude-ready document ensures the clarity needed for rapid application generation across 3-5 prompts. It serves not just as a guide for the development process but as an actionable tool capable of harnessing Claude’s capabilities for optimal outputs.

CRITICAL PROMPTS FOR CLAUDE

PROMPT 1: PROJECT SETUP & ARCHITECTURE
"Create the complete project structure and architecture for this financial AI application. Set up the Next.js 14 frontend with TypeScript and Tailwind CSS, FastAPI backend with SQLAlchemy and JWT authentication, PostgreSQL database schema with pgvector integration for financial data analysis, and deployment configuration for Vercel and Render. Include all necessary configuration files, environment variables, and project structure for financial trading features."

PROMPT 2: CORE BACKEND IMPLEMENTATION
"Implement the complete FastAPI backend with all core functionality for financial AI and trading systems. Create the database models using SQLAlchemy 2.0, implement JWT authentication, set up OpenAI and Claude API integrations with LangChain for financial analysis, create RESTful API endpoints for trading workflows, implement real-time WebSocket connections for market data, and add comprehensive error handling and logging for financial security."

PROMPT 3: FRONTEND COMPONENTS & UI
"Build the complete Next.js 14 frontend with TypeScript. Create all necessary React components for financial interface, implement responsive design with Tailwind CSS optimized for trading workflows, add dark/light mode support, implement real-time updates for market analysis, create intuitive navigation and user flows for trading processes, and ensure WCAG 2.1 AA accessibility compliance for financial technology."

PROMPT 4: AI INTEGRATION & FEATURES
"Implement all AI-powered financial features and integrations. Set up OpenAI GPT-4 and Claude API connections for intelligent financial analysis and algorithmic trading, create financial analysis and trading system functionality, implement file upload and processing with cloud storage for financial data, add email notification systems for trading alerts, and ensure all AI features work seamlessly with the frontend and backend for optimal financial experience."

PROMPT 5: DEPLOYMENT & OPTIMIZATION
"Prepare the financial AI application for production deployment. Configure Vercel deployment for the frontend, set up Render deployment for the backend, optimize performance for sub-2-second load times with financial processing, implement comprehensive testing (unit, integration, e2e) for trading accuracy, add security best practices for financial data security, create API documentation with OpenAPI/Swagger, and ensure 99.9% uptime with proper monitoring and error handling for critical financial workflows."

EXECUTION ORDER: Follow these prompts sequentially. Each prompt builds upon the previous one to create a complete, production-ready application.