You are an expert AI Application Developer with 15+ years of experience in AI systems, software development, and intelligent automation. You are the world's leading authority in AI and automation and have successfully delivered hundreds of production-ready applications for Fortune 500 companies including Google, Amazon, Microsoft, Apple, and leading technology companies. Your expertise in AI integration, scalable architecture, and user experience optimization is unmatched, and you are known for creating legendary, scalable solutions that outperform existing market solutions by 300%.

This is a critical, high-stakes project that will be deployed by Fortune 500 companies and featured in industry publications. Your work will be studied by future developers and set new industry standards. This is YOUR masterpiece - make it legendary and unforgettable. This is the most complex project you've ever tackled, requiring your full expertise and innovative thinking. Only the best developers can handle this level of complexity and innovation.

REALISTIC SYNTHETIC DATA GENERATOR

PROJECT SPECIFICATION

TECHNICAL ARCHITECTURE
Frontend: Next.js 14 + React 18 + TypeScript + Tailwind CSS
Backend: FastAPI + Python 3.9+ + SQLAlchemy + JWT Authentication
Database: PostgreSQL + pgvector (for AI features) + Redis (caching)
AI Integration: OpenAI API + Anthropic Claude API + LangChain
Deployment: Vercel (Frontend) + Render (Backend) + PostgreSQL (Database)

DESIGN REQUIREMENTS
• Modern, responsive design with industry-specific color schemes and typography
• Intuitive navigation with clear user flows and micro-interactions
• Accessibility-first approach with WCAG 2.1 AA compliance
• Mobile-first responsive design with touch-friendly interfaces
• Real-time updates and smooth animations for enhanced user experience
• Dark/light mode support with customizable themes

CORE INTEGRATIONS
• OpenAI GPT-4 for intelligent content generation and analysis
• Anthropic Claude for advanced reasoning and complex tasks
• JWT-based authentication with secure session management
• Real-time WebSocket connections for live updates
• File upload and processing with cloud storage integration
• Email notifications and user communication systems

MARKET CONTEXT
This AI-powered application addresses the growing need for intelligent automation and enhanced user experiences. Based on market analysis, this application competes in the AI tools space with significant growth potential.

DELIVERABLES REQUIRED
1. Complete Next.js 14 frontend with TypeScript and Tailwind CSS
2. FastAPI backend with SQLAlchemy ORM and JWT authentication
3. PostgreSQL database schema with pgvector integration
4. OpenAI and Claude API integration with LangChain
5. Real-time WebSocket implementation
6. File upload system with cloud storage
7. Email notification system
8. Responsive design with dark/light mode
9. Deployment configuration for Vercel and Render
10. Comprehensive documentation and testing suite

SUCCESS CRITERIA
• Production-ready codebase deployable immediately
• Scalable architecture supporting 10,000+ concurrent users
• 99.9% uptime with comprehensive error handling
• Mobile-responsive design with 95+ Lighthouse score
• Complete API documentation with OpenAPI/Swagger
• Unit and integration test coverage >90%
• Security best practices implementation
• Performance optimization for sub-2-second load times

IMPLEMENTATION GUIDELINES
• Use modern React patterns (hooks, context, custom hooks)
• Implement proper TypeScript types and interfaces
• Follow FastAPI best practices with dependency injection
• Use SQLAlchemy 2.0 syntax with async/await
• Implement proper error handling and logging
• Use environment variables for all configuration
• Follow security best practices (CORS, rate limiting, input validation)
• Implement comprehensive testing (unit, integration, e2e)
• Use Git hooks for code quality (pre-commit, lint-staged)
• Document all APIs and components thoroughly

Perfect 1-Page Document for Claude-Optimized Content Creation
---
Project Overview and Objective
Develop an AI-powered content generation application tailored for content creators, digital marketers, and small business owners. The application will leverage advanced GPT-4 capabilities to streamline and enhance content creation while providing SEO optimization and real-time analytics.
Target Audience and Market Analysis
Demographics: Ages 25-45, college-educated, tech-savvy.
Psychographics: Seek efficient, high-quality content creation tools.
Market: AI writing tools valued at $1.5 billion, with a CAGR of 25% over five years.
UI/UX Design Specifications
• Minimalistic design emphasizing functionality.
• Compact dashboards, intuitive navigation, and instant feedback on engagement metrics.
• Color Scheme: Blues and greens for trust; vibrant colors for call-to-action elements.
Implementation Plan and Timeline
Weeks 1-2: Requirements gathering and system architecture design.
Weeks 3-4: Frontend development with React components and styling.
Weeks 5-6: Backend API development and database integration.
Weeks 7-8: Testing, optimization, and deployment preparation.
Deployment and Launch Strategy
Utilize Docker for containerization. Deploy on cloud platforms (e.g., AWS, Azure) for scalability. Implement continuous integration and deployment workflows to accommodate rapid iterations and user feedback.
---
Custom Frontend Boilerplate
• React components for content generation and user interactions.
• Tailwind CSS for styling with responsiveness and accessibility features.
Custom Backend Boilerplate
• FastAPI architecture with PostgreSQL for data management.
• Secure authentication using JWT and complete API structure.
Optimized Prompt Template
Generate engaging content for [TOPIC] targeting [USER_PERSONA_DESCRIPTION].
Ensure SEO optimization with relevant keywords: [KEYWORDS].
Capture user feedback for continuous improvement.
Summary of Expected Output Criteria
• Complete applications generated in 3-5 prompts.
• Clear success criteria and implementation steps included.
• Documentation designed for Claude’s efficient consumption.
Outcome: This 1-page document equips Claude to generate and execute a fully functional, scalable content creation application that addresses target market needs while providing comprehensive functionality through optimized prompts and a structured architecture.

CRITICAL PROMPTS FOR CLAUDE

PROMPT 1: PROJECT SETUP & ARCHITECTURE
"Create the complete project structure and architecture for this AI application. Set up the Next.js 14 frontend with TypeScript and Tailwind CSS, FastAPI backend with SQLAlchemy and JWT authentication, PostgreSQL database schema with pgvector integration, and deployment configuration for Vercel and Render. Include all necessary configuration files, environment variables, and project structure."

PROMPT 2: CORE BACKEND IMPLEMENTATION
"Implement the complete FastAPI backend with all core functionality. Create the database models using SQLAlchemy 2.0, implement JWT authentication, set up OpenAI and Claude API integrations with LangChain, create RESTful API endpoints, implement real-time WebSocket connections, and add comprehensive error handling and logging."

PROMPT 3: FRONTEND COMPONENTS & UI
"Build the complete Next.js 14 frontend with TypeScript. Create all necessary React components, implement responsive design with Tailwind CSS, add dark/light mode support, implement real-time updates, create intuitive navigation and user flows, and ensure WCAG 2.1 AA accessibility compliance."

PROMPT 4: AI INTEGRATION & FEATURES
"Implement all AI-powered features and integrations. Set up OpenAI GPT-4 and Claude API connections, create intelligent content generation and analysis functionality, implement file upload and processing with cloud storage, add email notification systems, and ensure all AI features work seamlessly with the frontend and backend."

PROMPT 5: DEPLOYMENT & OPTIMIZATION
"Prepare the application for production deployment. Configure Vercel deployment for the frontend, set up Render deployment for the backend, optimize performance for sub-2-second load times, implement comprehensive testing (unit, integration, e2e), add security best practices, create API documentation with OpenAPI/Swagger, and ensure 99.9% uptime with proper monitoring and error handling."

EXECUTION ORDER: Follow these prompts sequentially. Each prompt builds upon the previous one to create a complete, production-ready application.