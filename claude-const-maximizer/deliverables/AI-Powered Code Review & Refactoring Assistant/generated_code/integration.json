{
  "lib/api-client.ts": "import axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor for auth\napiClient.interceptors.request.use((config) => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport default apiClient;",
  "lib/auth.ts": "import apiClient from './api-client';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n}\n\nexport const auth = {\n  async login(email: string, password: string): Promise<User> {\n    const response = await apiClient.post('/auth/login', { email, password });\n    const { token, user } = response.data;\n    localStorage.setItem('auth_token', token);\n    return user;\n  },\n\n  async logout(): Promise<void> {\n    localStorage.removeItem('auth_token');\n  },\n\n  async getCurrentUser(): Promise<User | null> {\n    try {\n      const response = await apiClient.get('/auth/me');\n      return response.data;\n    } catch {\n      return null;\n    }\n  },\n};",
  "hooks/use-api.ts": "import { useState, useEffect } from 'react';\nimport apiClient from '../lib/api-client';\n\nexport const useApi = (url: string) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await apiClient.get(url);\n        setData(response.data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n};",
  "types/api.ts": "export interface ApiResponse {\n  data: any;\n  status: number;\n  statusText: string;\n  headers: any;\n  request?: any;\n}",
  "middleware.ts": "import { NextApiRequest, NextApiResponse } from 'next';\nimport apiClient from './lib/api-client';\n\nexport const middleware = async (req: NextApiRequest, res: NextApiResponse) => {\n  const token = req.headers.authorization;\n\n  if (!token) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n\n  try {\n    const response = await apiClient.get('/auth/me', {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n\n    if (response.status !== 200) {\n      throw new Error('Invalid token');\n    }\n\n    req.user = response.data;\n  } catch (error) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n\n  return req;\n};"
}