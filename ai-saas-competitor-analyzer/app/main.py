import os
import json
from pathlib import Path

from fastapi import FastAPI
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from dotenv import load_dotenv

from .models import AnalyzeRequest, AnalyzeResponse
from .crews import build_crews

load_dotenv()

app = FastAPI(title="AI SaaS Competitor Analyzer")

# --- CORS for the Next.js frontend (tighten allow_origins in production) ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],           # e.g., ["https://your-vercel-app.vercel.app"]
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Serve /reports as static (PDFs & charts generated by the Report Agent) ---
REPORTS_PATH = Path(__file__).resolve().parent.parent / "reports"
REPORTS_PATH.mkdir(exist_ok=True)
app.mount("/reports", StaticFiles(directory=str(REPORTS_PATH)), name="reports")

@app.get("/")
def root():
    return {"ok": True, "app": "AI SaaS Competitor Analyzer"}

@app.post("/analyze", response_model=AnalyzeResponse)
def analyze(payload: AnalyzeRequest):
    crew1, crew2 = build_crews()

    # 1) Kick off Crew 1 with competitor list
    comp_payload = {
        "competitors": [
            {
                "name": c.name,
                "url": c.url,
                "pages": [str(p) for p in (c.pages or ([c.url] if c.url else []))]
            }
            for c in payload.competitors
        ]
    }
    r1 = crew1.kickoff(inputs={
        # Each task reads what it needs; we pass a single shared input the tools consume as JSON.
        "web-scraper": json.dumps(comp_payload)
    })

    # Parse scrape results from scraper task output
    scraped_json = r1.tasks_output[0].raw_output if hasattr(r1, "tasks_output") else r1
    try:
        scraped = json.loads(scraped_json)
    except Exception:
        scraped = []

    # 2) Normalize
    normalized_json = crew1.agents[1].tools[0].run(json.dumps({"scraped": scraped}))
    normalized = json.loads(normalized_json)

    # 3) Feature matrix
    matrix_json = crew1.agents[2].tools[0].run(json.dumps({"normalized": normalized}))
    matrix = json.loads(matrix_json)

    # 4) Comparison (Crew 2)
    comparison_json = crew2.agents[0].tools[0].run(json.dumps({"normalized": normalized, "matrix": matrix}))
    comparison = json.loads(comparison_json)

    # 5) Strategy
    strategy_json = crew2.agents[1].tools[0].run(json.dumps({"normalized": normalized, "matrix": matrix}))
    strategy = json.loads(strategy_json)

    # 6) Report
    title = f"Competitive Intelligence Report ({payload.industry or 'Generic'})"
    report_json = crew2.agents[2].tools[0].run(json.dumps({
        "title": title,
        "normalized": normalized,
        "matrix": matrix,
        "comparison": comparison,
        "strategy": strategy
    }))
    report = json.loads(report_json)

    response = {
        "normalized": normalized,
        "feature_matrix": matrix,
        "comparison": comparison,
        "strategy": strategy,
        "report": report
    }
    return JSONResponse(content=response)
